pyinstaller --onefile --add-data "templates;templates" --add-data "static;static" --add-data "scripts;scripts" app.py

import requests
from fuzzywuzzy import fuzz

# Install fuzzywuzzy library if not installed
# pip install fuzzywuzzy

# Set your qTest details
base_url = "https://<your-qtest-domain>/"
project_id = "<your-project-id>"
token = "<your-api-token>"

# Get test cases and filter locally based on description using fuzzy matching
def search_test_case_by_description(test_case_description):
    test_cases_url = f"{base_url}api/v3/projects/{project_id}/test-cases"
    headers = {"Authorization": f"Bearer {token}"}

    response = requests.get(test_cases_url, headers=headers, verify=False)
    response_data = response.json()

    best_match = None
    best_similarity_ratio = 0

    for item in response_data:
        test_case_description_actual = item["description"]
        similarity_ratio = fuzz.ratio(test_case_description.lower(), test_case_description_actual.lower())

        if similarity_ratio >= 80 and similarity_ratio > best_similarity_ratio:
            best_match = item
            best_similarity_ratio = similarity_ratio

    return best_match

# Main function to search and print automation status
def get_automation_status_by_description(test_case_description):
    test_case = search_test_case_by_description(test_case_description)

    if test_case:
        test_case_id = test_case["id"]
        test_case_name = test_case["name"]
        automation_status = test_case.get("automation_status", "N/A")  # Use get() to handle missing key
        qtest_link = f"{base_url}p/{project_id}/portal#/testcase/{test_case_id}"

        output = f"{test_case_name}|{test_case_id}|{automation_status}|{qtest_link}"
        print(output)
    else:
        print(f"No test case found for the partial search: {test_case_description}")

# Read test case descriptions from a file
def read_test_case_descriptions_from_file(file_path):
    with open(file_path, "r") as file:
        return [line.strip() for line in file]

# Example usage
file_path = "test_case_descriptions.txt"  # Update with your file path
test_case_descriptions_to_search = read_test_case_descriptions_from_file(file_path)

for test_case_description in test_case_descriptions_to_search:
    get_automation_status_by_description(test_case_description)
