pyinstaller --onefile --add-data "templates;templates" --add-data "static;static" --add-data "scripts;scripts" app.py

import requests
from fuzzywuzzy import fuzz

# Install fuzzywuzzy library if not installed
# pip install fuzzywuzzy

# Set your qTest details
base_url = "https://<your-qtest-domain>/"
project_id = "<your-project-id>"
token = "<your-api-token>"

# Search for a test case by name using fuzzy matching
def search_test_case(test_case_name):
    search_url = f"{base_url}api/v3/projects/{project_id}/search"
    headers = {"Authorization": f"Bearer {token}"}
    params = {"object_type": "test-cases", "fields": "id,name,automation_status", "query": test_case_name}

    response = requests.get(search_url, headers=headers, params=params, verify=False)
    response_data = response.json()

    total_result = response_data.get("totalResult", 0)

    best_match = None
    best_similarity_ratio = 0

    if total_result > 0:
        for item in response_data["items"]:
            test_case_name_actual = item["name"]
            similarity_ratio = fuzz.ratio(test_case_name.lower(), test_case_name_actual.lower())

            if similarity_ratio >= 80 and similarity_ratio > best_similarity_ratio:
                best_match = item
                best_similarity_ratio = similarity_ratio

        return best_match

    return None

# Get the last execution date of a test case
def get_last_execution_date(test_case_id):
    execution_url = f"{base_url}api/v3/projects/{project_id}/test-runs"
    headers = {"Authorization": f"Bearer {token}"}
    params = {"object_type": "test-runs", "fields": "last_test_log_date", "query": f"test_case_id={test_case_id}"}

    response = requests.get(execution_url, headers=headers, params=params, verify=False)
    response_data = response.json()

    if response_data.get("totalResult", 0) > 0:
        last_execution_date = response_data["items"][0]["last_test_log_date"]
        return last_execution_date
    else:
        return None

# Main function to search and print automation status
def get_automation_status(test_case_name):
    test_case = search_test_case(test_case_name)

    if test_case:
        test_case_id = test_case["id"]
        test_case_name_actual = test_case["name"]
        automation_status = test_case["automation_status"]
        last_execution_date = get_last_execution_date(test_case_id)
        qtest_link = f"{base_url}p/{project_id}/portal#/testcase/{test_case_id}"

        output = f"{test_case_name}|{test_case_id}|{automation_status}|{last_execution_date}|{qtest_link}"
        print(output)
    else:
        print(f"No test case found for the partial search: {test_case_name}")

# Read test case names from a file
def read_test_case_names_from_file(file_path):
    with open(file_path, "r") as file:
        return [line.strip() for line in file]

# Example usage
file_path = "test_case_names.txt"  # Update with your file path
test_case_names_to_search = read_test_case_names_from_file(file_path)

for test_case_name in test_case_names_to_search:
    get_automation_status(test_case_name)
