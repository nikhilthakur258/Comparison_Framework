DECLARE @schemaName NVARCHAR(MAX) = 'your_schema';
DECLARE @tableName NVARCHAR(MAX);
DECLARE @columns NVARCHAR(MAX) = '';

-- Create a cursor to iterate through tables
DECLARE tableCursor CURSOR FOR
SELECT TABLE_NAME
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = @schemaName AND TABLE_TYPE = 'BASE TABLE';

-- Open the cursor
OPEN tableCursor;

-- Fetch the first table name
FETCH NEXT FROM tableCursor INTO @tableName;

-- Loop through tables
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Generate a comma-separated list of column names
    SELECT @columns = @columns + column_name + ', '
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_SCHEMA = @schemaName AND TABLE_NAME = @tableName;

    -- Remove the trailing comma
    SET @columns = LEFT(@columns, LEN(@columns) - 1);

    -- Build the dynamic SQL query
    DECLARE @sqlQuery NVARCHAR(MAX);
    SET @sqlQuery = 'SELECT COUNT(*) AS row_count
                     FROM ' + QUOTENAME(@schemaName) + '.' + QUOTENAME(@tableName) + '
                     GROUP BY ' + @columns + '
                     HAVING COUNT(*) > 1;';

    -- Execute the dynamic SQL query and print results only if duplicates are found
    DECLARE @rowCount INT;
    EXEC sp_executesql @sqlQuery, N'@rowCount INT OUTPUT', @rowCount OUTPUT;

    IF @rowCount IS NOT NULL
    BEGIN
        PRINT 'Table: ' + @tableName + ', Duplicate Rows Count: ' + CAST(@rowCount AS NVARCHAR(MAX));
    END

    -- Reset variables for the next iteration
    SET @columns = '';

    -- Fetch the next table name
    FETCH NEXT FROM tableCursor INTO @tableName;
END

-- Close and deallocate the cursor
CLOSE tableCursor;
DEALLOCATE tableCursor;
