pyinstaller --onefile --add-data "templates;templates" --add-data "static;static" --add-data "scripts;scripts" app.py

#include <stdio.h>
int checkPrime(int n);
int main() {
  int n, i, flag = 0;
  printf("Enter a positive integer: ");
  scanf("%d", &n);

  for (i = 2; i <= n / 2; ++i) {
    // condition for i to be a prime number
    if (checkPrime(i) == 1) {
      // condition for n-i to be a prime number
      if (checkPrime(n - i) == 1) {
        printf("%d = %d + %d\n", n, i, n - i);
        flag = 1;
      }
    }
  }

  if (flag == 0)
    printf("%d cannot be expressed as the sum of two prime numbers.", n);

  return 0;
}

// function to check prime number
int checkPrime(int n) {
  int i, isPrime = 1;

  // 0 and 1 are not prime numbers
  if (n == 0 || n == 1) {
    isPrime = 0;
  }
  else {
    for(i = 2; i <= n/2; ++i) {
      if(n % i == 0) {
        isPrime = 0;
        break;
      }
    }
  }

  return isPrime;
}

===============================================================================


python code: 

def check_prime(n):
    is_prime = 1
    
    # 0 and 1 are not prime numbers
    if n == 0 or n == 1:
        is_prime = 0
    else:
        for i in range(2, n // 2 + 1):
            if n % i == 0:
                is_prime = 0
                break
    
    return is_prime

def main():
    n = int(input("Enter a positive integer: "))
    flag = 0

    for i in range(2, n // 2 + 1):
        # condition for i to be a prime number
        if check_prime(i) == 1:
            # condition for n-i to be a prime number
            if check_prime(n - i) == 1:
                print(f"{n} = {i} + {n - i}")
                flag = 1
    
    if flag == 0:
        print(f"{n} cannot be expressed as the sum of two prime numbers.")

if __name__ == "__main__":
    main()


=============================================================================


Code Architecture Document

Introduction:
The provided C code aims to determine if a given positive integer can be expressed as the sum of two prime numbers. The code consists of a main function main and a helper function checkPrime to check whether a number is prime or not.

1. checkPrime Function:
1.1. Purpose:
The checkPrime function checks if a given integer is a prime number.

1.2. Parameters:
n (int): The number to be checked for primality.
1.3. Return:
isPrime (int): Returns 1 if the number is prime, and 0 otherwise.
1.4. Algorithm:
If n is 0 or 1, set isPrime to 0 (not prime).
Iterate from 2 to n/2 and check if n is divisible by any number in that range.
If n is divisible, set isPrime to 0 (not prime) and break the loop.
2. main Function:
2.1. Purpose:
The main function executes the main logic of the program, determining if a positive integer can be expressed as the sum of two prime numbers.

2.2. Variables:
n (int): The positive integer input.
i (int): Loop variable for iterating through possible values.
flag (int): Flag to indicate if the expression is found.
2.3. Input:
Accepts user input for a positive integer n.
2.4. Output:
Prints the expression if n can be expressed as the sum of two prime numbers.
Prints a message if n cannot be expressed as such.
2.5. Algorithm:
Iterate through possible values of i from 2 to n/2.
Check if both i and n-i are prime using the checkPrime function.
If both are prime, print the expression and set flag to 1.
If no expression is found (flag remains 0), print a message indicating that n cannot be expressed as the sum of two prime numbers.
3. Conclusion:
The code is well-organized with a clear separation of concerns. The checkPrime function handles the primality check, while the main function manages the overall logic of finding the expression. This modular structure enhances readability and maintainability. The code follows standard practices for input/output and uses meaningful variable names.
