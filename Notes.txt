import os
import argparse
from github import Github, GithubException
from datetime import datetime
import time
import xml.etree.ElementTree as ET
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from requests.packages.urllib3 import disable_warnings

# Disable SSL warnings
disable_warnings(InsecureRequestWarning)

# Set up GitHub API access
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')  # Ensure this is set as an environment variable
if not GITHUB_TOKEN:
    raise ValueError("Please set your GITHUB_TOKEN environment variable.")
GITHUB_HOST = 'rbcgithub.fg.rbc.com'
BASE_URL = f"https://{GITHUB_HOST}/api/v3"

# Create a session to be used with PyGithub
session = requests.Session()
session.verify = False  # Disable SSL certificate verification

# Initialize the Github object with the custom session
g = Github(base_url=BASE_URL, login_or_token=GITHUB_TOKEN, per_page=100, verify=False)

def check_rate_limit():
    rate_limit = g.get_rate_limit()
    core_limit = rate_limit.core
    reset_time = core_limit.reset.timestamp()  # Convert to timestamp
    remaining = core_limit.remaining
    print(f"Rate limit remaining: {remaining}")
    print(f"Reset time: {datetime.fromtimestamp(reset_time)}")
    return remaining, reset_time

def wait_for_rate_limit_reset():
    remaining, reset_time = check_rate_limit()
    if remaining == 0:
        wait_time = max(reset_time - time.time(), 0) + 10  # Add a buffer time
        print(f"Rate limit exceeded. Waiting for {wait_time} seconds before retrying...")
        time.sleep(wait_time)

def get_repo_info(repo_name):
    wait_for_rate_limit_reset()
    try:
        repo = g.get_repo(repo_name)
        info = {
            'name': repo.name,
            'description': repo.description,
            'language': repo.language,
            'topics': repo.get_topics(),
            'default_branch': repo.default_branch,
            'size': repo.size,
            'created_at': repo.created_at.strftime('%Y-%m-%d %H:%M:%S'),
            'updated_at': repo.updated_at.strftime('%Y-%m-%d %H:%M:%S'),
            'subscribers_count': repo.subscribers_count,
            'stargazers_count': repo.stargazers_count,
            'watchers_count': repo.watchers_count,
            'forks_count': repo.forks_count,
            'open_issues_count': repo.open_issues_count,
            'license': repo.license.name if repo.license else 'None',
            'html_url': repo.html_url,
        }
        return info
    except GithubException as e:
        if e.status == 403 and 'rate limit exceeded' in str(e):
            wait_for_rate_limit_reset()
            return get_repo_info(repo_name)
        else:
            raise ValueError(f"Error fetching repository '{repo_name}': {e}")

def get_files_recursively(repo, path='', extensions=None):
    if extensions is None:
        extensions = []
    result_files = []
    contents = repo.get_contents(path)
    for content in contents:
        if content.type == 'dir':
            result_files.extend(get_files_recursively(repo, content.path, extensions))
        else:
            if any(content.name.endswith(ext) for ext in extensions):
                result_files.append(content)
            elif not extensions:  # Add all files if no extensions are specified
                result_files.append(content)
    return result_files

def count_java_files(repo_name):
    wait_for_rate_limit_reset()
    try:
        repo = g.get_repo(repo_name)
        java_files = get_files_recursively(repo, '', ['.java'])
        return len(java_files)
    except GithubException as e:
        if e.status == 403 and 'rate limit exceeded' in str(e):
            wait_for_rate_limit_reset()
            return count_java_files(repo_name)
        else:
            raise ValueError(f"Error counting Java files in repository '{repo_name}': {e}")

def get_file_details(repo_name, extensions):
    wait_for_rate_limit_reset()
    try:
        repo = g.get_repo(repo_name)
        files = get_files_recursively(repo, '', extensions)
        file_details = []
        for file in files:
            content = file.decoded_content.decode('utf-8', errors='ignore')
            lines = content.count('\n') + 1 if content else 0
            file_details.append({
                'name': file.name,
                'path': file.path,
                'size': file.size,
                'lines_of_code': lines,
            })
        return file_details
    except GithubException as e:
        if e.status == 403 andâ¬¤
